# Generated by Django 3.2.25 on 2024-05-25 03:14

from django.db import migrations, models
from django.conf import settings
import os

def load_sql_from_file(apps, schema_editor):
    # Get the directory where this migration file is located
    current_dir = os.path.dirname(__file__)
    # Construct the path to the SQL file
    sql_file_path = os.path.join(current_dir, 'cleanup.sql')

    # Open and read the SQL file
    with open(sql_file_path, 'r') as file:
        sql = file.read()
    # Execute the SQL
    schema_editor.execute(sql)

class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.RunPython(load_sql_from_file),
        migrations.CreateModel(
            name='Departments',
            fields=[
                ('id', models.CharField(max_length=4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
                ('leader_first_name', models.CharField(max_length=15)),
                ('leader_last_name', models.CharField(max_length=15)),
                ('leader_phone', models.CharField(max_length=25)),
                ('leader_email', models.CharField(max_length=150)),
                ('reg_date', models.DateTimeField(default=models.functions.datetime.Now())),
                ('active', models.BooleanField(default=True)),
                ('deactive_date', models.DateField(blank=True, null=True)),
                ('info', models.CharField(max_length=200)),
            ],
            options={
                'db_table': 'transport_departments',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Driver',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('phone', models.CharField(max_length=25)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('license_no', models.CharField(max_length=20)),
                ('license_state', models.CharField(max_length=15)),
                ('license_country', models.CharField(max_length=60)),
                ('license_expire', models.DateField(blank=True, null=True)),
                ('drive_tested', models.CharField(max_length=30)),
                ('test_date', models.DateField(blank=True, null=True)),
                ('end_permit', models.DateField(blank=True, null=True)),
                ('home_country', models.CharField(max_length=30)),
                ('status_date', models.DateTimeField(blank=True, null=True)),
                ('user_type', models.CharField(choices=[('Other', 'Other'), ('Mission Bldr.', 'Mission Bldr.'), ('Staff', 'Staff'), ('Student', 'Student')], max_length=20)),
                ('photo', models.CharField(max_length=255)),
                ('photo_link', models.CharField(max_length=255)),
                ('comment', models.CharField(max_length=300)),
                ('permit_type', models.CharField(choices=[('Renew', 'Renew'), ('First', 'First')], default='First', max_length=20)),
                ('renew_date', models.DateField(blank=True, null=True)),
                ('renew_text', models.CharField(blank=True, max_length=200, null=True)),
                ('new_user', models.BooleanField(default=False)),
                ('driver_permission', models.BooleanField(default=False)),
                ('max_passengers', models.BigIntegerField(default=15)),
                ('department', models.ForeignKey(on_delete=models.deletion.RESTRICT, to='transport.departments')),
                ('user', models.OneToOneField(on_delete=models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'transport_driver',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='GlobalSettings',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('leader_code', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'transport_global_settings',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='InfoLinks',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=100)),
                ('text', models.TextField()),
                ('link_date', models.DateTimeField(blank=True, null=True)),
                ('position', models.SmallIntegerField(default=1)),
                ('display_page', models.CharField(max_length=25)),
                ('display_flag', models.CharField(blank=True, max_length=1, null=True)),
            ],
            options={
                'db_table': 'transport_info_links',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Reservations',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('planned_passenger_no', models.CharField(max_length=2)),
                ('coordinator_approval', models.CharField(default='Approved', max_length=15)),
                ('planned_departure_datetime', models.DateTimeField(blank=True, null=True)),
                ('planned_return_datetime', models.DateTimeField(blank=True, null=True)),
                ('overnight', models.BooleanField()),
                ('child_seat', models.BooleanField()),
                ('destination', models.CharField(max_length=100)),
                ('reservation_cancelled', models.BooleanField(default=False)),
                ('reg_date', models.DateTimeField(default=models.functions.datetime.Now())),
                ('cancelled_by_driver', models.BooleanField(default=False)),
                ('driver_cancelled_time', models.DateTimeField(blank=True, null=True)),
                ('key_no', models.CharField(blank=True, max_length=4, null=True)),
                ('card_no', models.CharField(blank=True, max_length=8, null=True)),
                ('repeating', models.BooleanField(default=False)),
                ('deleted_datetime', models.DateTimeField(blank=True, null=True)),
                ('no_cost', models.BooleanField(default=False)),
                ('assigned_driver', models.ForeignKey(db_column='assigned_driver', on_delete=models.deletion.RESTRICT, related_name='assigned_reservations', to='transport.driver')),
                ('billing_department', models.ForeignKey(db_column='billing_department', on_delete=models.deletion.RESTRICT, to='transport.departments')),
                ('deleted_by_driver', models.ForeignKey(blank=True, db_column='deleted_by_driver', null=True, on_delete=models.deletion.SET_NULL, related_name='deleted_reservations', to='transport.driver')),
                ('user', models.ForeignKey(on_delete=models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'transport_reservations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ServiceReservations',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('reg_date', models.DateTimeField(default=models.functions.datetime.Now())),
                ('from_datetime', models.DateTimeField(blank=True, null=True)),
                ('to_datetime', models.DateTimeField(blank=True, null=True)),
                ('is_cancelled', models.BooleanField(default=False)),
                ('service_type', models.CharField(max_length=15)),
                ('vehicle', models.ForeignKey(db_column='vehicle_id', on_delete=models.deletion.RESTRICT, to='transport.vehicles')),
            ],
            options={
                'db_table': 'transport_service_reservations',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TempMassEmails',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('email', models.CharField(max_length=250)),
                ('driver_name', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'transport_temp_mass_emails',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VehicleBrand',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'transport_vehicle_brand',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VehicleType',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=255)),
                ('capacity', models.SmallIntegerField()),
            ],
            options={
                'db_table': 'transport_vehicle_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='WorkType',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'transport_work_type',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Vehicles',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('vehicle_no', models.CharField(max_length=12)),
                ('vin_no', models.CharField(max_length=20)),
                ('oil_filter', models.CharField(max_length=20)),
                ('safety_date', models.DateField(blank=True, null=True)),
                ('registration_date', models.DateField(blank=True, null=True)),
                ('license_plate_no', models.CharField(max_length=50)),
                ('manufacture_year', models.CharField(max_length=4)),
                ('mileage_at_takeover', models.CharField(max_length=7)),
                ('date_at_takeover', models.DateField(blank=True, null=True)),
                ('cost_at_takeover', models.FloatField()),
                ('cost_rate', models.FloatField()),
                ('passenger_capacity', models.CharField(max_length=2)),
                ('condition', models.CharField(max_length=50)),
                ('restriction', models.CharField(max_length=150)),
                ('issues', models.CharField(max_length=255)),
                ('active', models.BooleanField()),
                ('restricted', models.BooleanField()),
                ('revised_date', models.DateTimeField(blank=True, null=True)),
                ('sold', models.BooleanField(default=False)),
                ('sold_date', models.DateField(blank=True, null=True)),
                ('admin_issues', models.TextField()),
                ('make', models.ForeignKey(on_delete=models.deletion.RESTRICT, to='transport.vehiclebrand')),
                ('model', models.ForeignKey(on_delete=models.deletion.RESTRICT, to='transport.vehicletype')),
                ('user', models.ForeignKey(on_delete=models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'transport_vehicles',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VehicleLimit',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('option', models.SmallIntegerField()),
                ('from_date', models.DateField(blank=True, null=True)),
                ('to_date', models.DateField(blank=True, null=True)),
                ('limit_value', models.SmallIntegerField(default=3)),
                ('department', models.ForeignKey(on_delete=models.deletion.RESTRICT, to='transport.departments')),
                ('user', models.ForeignKey(on_delete=models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'transport_vehicle_limit',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='VehicleComments',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('comment_date', models.BigIntegerField()),
                ('type', models.CharField(max_length=25)),
                ('comments', models.CharField(max_length=300)),
                ('posting_user', models.ForeignKey(on_delete=models.deletion.CASCADE, to='transport.driver')),
                ('vehicle', models.ForeignKey(on_delete=models.deletion.CASCADE, to='transport.vehicles')),
            ],
            options={
                'db_table': 'transport_vehicle_comments',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TripDetails',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('begin_mileage', models.CharField(max_length=7)),
                ('end_mileage', models.CharField(max_length=7)),
                ('end_gas_percent', models.CharField(max_length=4)),
                ('problem', models.BooleanField()),
                ('problem_description', models.TextField()),
                ('reg_date', models.DateTimeField(default=models.functions.datetime.Now())),
                ('mile_charges', models.FloatField()),
                ('reservation', models.ForeignKey(on_delete=models.deletion.CASCADE, to='transport.reservations')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'transport_trip_details',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SpecialNotice',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('notice_date', models.DateTimeField(blank=True, null=True)),
                ('title', models.CharField(max_length=255)),
                ('notice', models.TextField()),
                ('user', models.ForeignKey(on_delete=models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'transport_special_notice',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ShopTasks',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('mileage_reading', models.CharField(max_length=7)),
                ('last_mileage', models.CharField(max_length=7)),
                ('work_start_date', models.DateField(blank=True, null=True)),
                ('next_oil_change', models.DateField(blank=True, null=True)),
                ('total_cost', models.FloatField()),
                ('parts_source', models.CharField(max_length=255)),
                ('drive_test_done', models.BooleanField()),
                ('task_complete', models.BooleanField()),
                ('technician_comments', models.TextField()),
                ('reg_date', models.DateTimeField(default=models.functions.datetime.Now())),
                ('invoice_no', models.CharField(max_length=50)),
                ('vendor_name', models.CharField(max_length=50)),
                ('user', models.ForeignKey(on_delete=models.deletion.RESTRICT, to=settings.AUTH_USER_MODEL)),
                ('vehicle', models.ForeignKey(on_delete=models.deletion.RESTRICT, to='transport.vehicles')),
                ('work_type', models.ForeignKey(on_delete=models.deletion.RESTRICT, to='transport.worktype')),
            ],
            options={
                'db_table': 'transport_shop_tasks',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ServiceReservationsDetails',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('reservation', models.ForeignKey(on_delete=models.deletion.CASCADE, to='transport.reservations')),
                ('service_reservation', models.ForeignKey(on_delete=models.deletion.CASCADE, to='transport.servicereservations')),
            ],
            options={
                'db_table': 'transport_service_reservations_details',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RestrictedCharges',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('charge_month', models.CharField(max_length=2)),
                ('charge_year', models.CharField(max_length=4)),
                ('calculation_method', models.CharField(max_length=50)),
                ('total_charge', models.FloatField()),
                ('begin_mileage', models.CharField(blank=True, max_length=7, null=True)),
                ('end_mileage', models.CharField(blank=True, max_length=7, null=True)),
                ('rate', models.FloatField(blank=True, null=True)),
                ('reg_date', models.DateTimeField(blank=True, null=True)),
                ('department', models.ForeignKey(on_delete=models.deletion.RESTRICT, to='transport.departments')),
                ('vehicle', models.ForeignKey(db_column='vehicle_id', on_delete=models.deletion.RESTRICT, to='transport.vehicles')),
            ],
            options={
                'db_table': 'transport_restricted_charges',
                'managed': False,
            },
        ),
        migrations.AddField(
            model_name='reservations',
            name='vehicle',
            field=models.ForeignKey(db_column='vehicle_id', on_delete=models.deletion.RESTRICT, to='transport.vehicles'),
        ),
        migrations.CreateModel(
            name='Log',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('login_datetime', models.DateTimeField(blank=True, null=True)),
                ('logout_datetime', models.DateTimeField(blank=True, null=True)),
                ('ip_address', models.CharField(max_length=16)),
                ('user', models.ForeignKey(on_delete=models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'transport_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='InfoLinksPosition',
            fields=[
                ('position', models.IntegerField()),
                ('driver_login', models.BooleanField()),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('link', models.ForeignKey(on_delete=models.deletion.CASCADE, to='transport.infolinks')),
            ],
            options={
                'db_table': 'transport_info_links_position',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DriverComments',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('comments_date', models.DateTimeField(default=models.functions.datetime.Now())),
                ('comments', models.TextField()),
                ('about_user', models.ForeignKey(on_delete=models.deletion.CASCADE, related_name='comments_about', to='transport.driver')),
                ('posting_user', models.ForeignKey(on_delete=models.deletion.CASCADE, related_name='comments_posting', to='transport.driver')),
                ('trip', models.ForeignKey(blank=True, null=True, on_delete=models.deletion.SET_NULL, to='transport.tripdetails')),
            ],
            options={
                'db_table': 'transport_driver_comments',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CommentLog',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('comments', models.TextField()),
                ('comment_time', models.DateTimeField(default=models.functions.datetime.Now())),
                ('user', models.ForeignKey(on_delete=models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'transport_comment_log',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AbandonTrips',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('abandon_date', models.DateTimeField(blank=True, null=True)),
                ('notes', models.TextField()),
                ('mile_charges', models.FloatField()),
                ('calculate_fine', models.BooleanField(default=False)),
                ('miles', models.SmallIntegerField(default=25)),
                ('reservation', models.ForeignKey(on_delete=models.deletion.CASCADE, to='transport.reservations')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'transport_abandon_trips',
                'managed': False,
            },
        ),
    ]
